#include <iostream>
#include <stack>
#include <vector>
#include <cmath>
#include <string>


int checkCharacter(char c) {

	if (c == '+')
		return 1;
	else if (c == '-')
		return 1;
	else if (c == '*')
		return 2;
	else if (c == '/')
		return 2;
	else if (c == '^')
		return 3;
	else if (c == '(')
		return 0;
	else if (c == ')')
		return 5;
	else if (c == 'R') {
		return 6;
	}
	else
		return -1;
}
double calculatingONP(std::vector<std::string> expression){
	std::stack<double> myStack;
	std::stack<double> myStack2;
	for (int i = 0; i < expression.size(); i++) {
		
		while (!myStack.empty())
		{
			myStack2.push(myStack.top());
			myStack.pop();
		}
		while (!myStack2.empty())
		{
			myStack.push(myStack2.top());
			std::cout << i << "  " << myStack2.top() << "\n";
			myStack2.pop();
		}
		
		if (expression.size()-1 == i)
		{
			std::cout << "xd";
		}
		
		if (expression[i] == "+") {
			double a = myStack.top();
			myStack.pop();
			double b = myStack.top();
			myStack.pop();
			myStack.push(a+b);
		}
		else if (expression[i] == "-") {
			double a = myStack.top();
			myStack.pop();
			if (myStack.empty()) {
				myStack.push(0 - a);
			}
			else {
				double b = myStack.top();
				myStack.pop();
				myStack.push(b - a);
			}
		}
		else if (expression[i] == "*") {
			double a = myStack.top();
			myStack.pop();
			double b = myStack.top();
			myStack.pop();
			myStack.push(a*b);
		}
		else if (expression[i] == "/") {
			double a = myStack.top();
			myStack.pop();
			double b = myStack.top();
			myStack.pop();
			myStack.push(b/a);
		}
		else if (expression[i] == "R") {
			double a = myStack.top();
			myStack.pop();
			double b = myStack.top();
			myStack.pop();
			myStack.push(pow(a,1/b));
		}
		else if (expression[i] == "^") {
			double a = myStack.top();
			myStack.pop();
			double b = myStack.top();
			myStack.pop();
			myStack.push(pow(b, a));
		}
		else {
			double a = std::stod(expression[i]);
			myStack.push(a);
		}
	}
	return myStack.top();
}

std::vector<std::string> stringToVector(std::string expression) {
	
	std::vector<std::string> vec;
	std::string temp{};
	bool isLastCharacterOperator = true;
	for (int i = 0; i < expression.length(); i++) {
		if (expression[i] == ' ') {
			continue;
		}
		else if(checkCharacter(expression[i]) >= 0) {
			
			if (isLastCharacterOperator) {

				if (expression[i] == '-' && !vec.empty() &&vec.back()[0] != '(' && vec.back()[0] != ')') {
					temp += expression[i];
				}
				else {
					std::string s(1, expression[i]);
					vec.push_back(s);
				}
			}
			else {
				vec.push_back(temp);
				temp.clear();
				std::string s(1, expression[i]);
				vec.push_back(s);

			}
			isLastCharacterOperator = true;
			
		}
		else {
			temp += expression[i];
			isLastCharacterOperator = false;
		}
	}
	vec.push_back(temp);
	return vec;
}

std::vector<std::string> toONP(std::vector<std::string> expression) {
	std::vector<std::string> output;
	std::stack<std::string> myStack;
	char last{};
	for (auto i : expression) {
		if (i != "") {
			last = i[i.length() - 1];
		}
		if (i == "") {
			continue;
		}

		else if (std::isdigit(last)) {
			output.push_back(i);
		}
		else if (myStack.empty()) {
			myStack.push(i);
		}
		else if (checkCharacter(i[0]) == 0) {
			myStack.push(i);
		}
		else if (i[0] == '-' && myStack.top()[0]=='-')
		{
			std::string temp1=myStack.top();
			myStack.pop();
			std::string temp2 = myStack.top();
			myStack.pop();

			myStack.push(temp1);
			myStack.push(temp2);
			myStack.push(i);



		}
		else if (checkCharacter(i[0]) == 5) {
			while (myStack.top()[0] != '(') {
				output.push_back(myStack.top());
				myStack.pop();
			}
			myStack.pop();
		}
		else if (checkCharacter(i[0]) < checkCharacter(myStack.top()[0])) {
			output.push_back(myStack.top());
			myStack.pop();
			myStack.push(i);
		}
		else {
			myStack.push(i);
		}
	}

	
	while (!myStack.empty()) {
		output.push_back(myStack.top());
		myStack.pop();
	}

	
	return output;
}
int main() {
	
	return 0;
}
